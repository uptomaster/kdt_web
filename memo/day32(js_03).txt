day33 (js 4일차)

0. 복습

1) DOM 트리
   웹 문서의 구조와 정보들을 트리 형태로 저장한다
   DOM 트리를 구성하는 하나하나 요소를 노드라고 하고 
   최상위노드를 root 노드(document 노드)
   각 노드들은 위치에 따라 부모, 자식, 형제, 조상노드라고 한다
   태그노드, 속성노드, 텍스트노드 등이 있다

2) DOM(Document Object Model)
	html 태그들을 하나씩 객체화 한 것을 의미한다.

3) DOM Selector 종류
	- HTMLCollection를 반환하는 메소드 : 실시간(live) 컬렉션
		document.getelementById('id')	단일 요소 반환(HTML 요소 1개)
		document.getelementsByClassName('클래스명') 같은 클래스명을 가진 요소들 반환(HTMLCollection)
		document.getElementsByTagName('tag명') 태그이름으로 요소들 반환(HTMLCollection)
	
	- NodeList 반환하는 메소드 : 정적(static)리스트 [단, Node.childNodes는 예외적으로 live일 수 있음]
		document.getElementsByName('name명')	name 속성으로 요소들 선택(NodeList)
		document.querySelector('css선택자') 	첫번째 일치하는 요소만 반환(element)
		document.querySelectorAll('css선택자')	모든 일치하는 요소들을 반환(NodeList)

		HTMLCollection		NodeList
반복문		for, for .. of등		for, for .. of, for Each 모두 가능
실시간여부		실시간			고정 스냅샷(실시간 반영X)


		HTMLCollection.prototype.forEach = Array.prototype.forEach; 를 대입해야 
		HTMLCollection에서도 forEach문을 사용할 수 있다.

4) 요소 내용 가져오기, 수정하기
	- 요소.innerText
	- 요소.innerHTML

5) 요소 속성 가져오기, 수정하기, 삭제하기
	- 요소.getAttribute('속성명')
	- 요소.setAttribute('속성명','값')
	- 요소.removeAttribute('속성명')
	
6) DOM을 활용한 이벤트처리
	- DOM 요소에 이벤트 핸들러 직접 연결시키기
	요소.on이벤트명 = 함수;

	- addEventListener()메소드 사용하기.
	요소.addEventListener(이벤트, 함수); ex) element.addEventListenr('click',함수);
============================================================================================
1. 팝업창과 모달창

1) 팝업창
	현재 페이지에 새로운 브라우저 창을 열어주는 것을 의미.
	브라우저 설정에 따라 팝업창을 막아두는 경우가 많아졌다.
<body>
  <button onclick="openPopUp()">팝업열기</button>
</body>
<script>
  function openPopUp(){
    window.open("https://www.naver.com", "_black", "width=400 height=600");
  }
</script>



2) 모달창
	lightbox를 마치 하나의 팝업창처럼 만드는것을 의미한다.
	팝업창과 비교했을 때 실제 브라우저 창이 아니라 새로운 레이어를 띄워준다는 차이가 있다.
	(사진을 눌렀을때 새로운 레이어 창 뜨기) 요즘에는 이 방식을 많이 사용하고 있다.
====================================================================================
2. defer, async
	웹 브라우저에서 돌아가는 스크립트는 대부분 HTML보다 무겁다.
	용량이 커서 다운로드 받을때도 오랜 시간이 걸리고 처리할 때도 오래 걸린다.
	
	브라우저는 HTML을 읽다가 script태그를 만나면 스크립트를 먼저 읽어야 하기에
	DOM생성을 멈춘다.
	src 속성이 있는 외부 스크립트가 적용되어도 똑같다.

	스크립트에서는 스크립트 아래에 있는 DOM요소에 접근할 수 있다.
	DOM요소에 이벤트 핸들러를 추가하는 등의 사용이 불가능해진다.
	페이지 위쪽에 용량이 큰 스크립트가 있는 경우 스크립트가 페이지를 막아버린다.
	따라서 페이지에 접근하는 사람들은 스크립트를 다운받고 실행할 때 
	스크립트 아래쪽에 있는 페이지를 볼 수가 없게된다.
-----------------------------------------------------------------------------
<위의 해결방법>
1) defer
	defer속성이 있는 <script>를 백그라운드에서 다운로드 한다.
	지연 스크립트를 다운로드하는 도중에도 HTML을 읽어들이는것(파싱)이 멈추지 않고
	defer 스크립트 실행은 페이지 구성을 끝낼때까지 지연된다.
	- 지연 스크립트는 페이지 생성을 절대 막지 않는다.
	- 지연 스크립트는 DOM에 준비된 후에 실행되긴 하지만 DOMContentLoaded 이벤트 발생전에 실행된다.
	※ defer 속성은 외부 스크립트에만 유효하다.
	<script defer src="스크립트파일경로"></script>
	src 속성이 없으면 무시된다.

정상흐름(defer 적용시)
1. html을 파싱하면서 <p>태그들을 화면에 출력한다.
2. defer가 있는 스크립트는 백그라운드에서 다운로드 된다.
3. HTML 파싱이 끝나면 defer 스크립트가 실행된다.
4. 모든 스크립트 실행이 완료되면 DOMContentLoaded 이벤트 발생 -> alert()실행


defer 없이 script 태그를 사용하면
HTML파싱(읽어들이는 것)이 중간에 멈추게 된다.
스크립트 다운로드 및 실행이 끝난 후 다시 HTML 파싱을 재개하는 것이다.
이렇게되면 사용자가 페이지 내용을 늦게 볼수밖에없게되고, 이는 성능저하로 이어진다는 문제가 발생한다.
-----------------------------------------------------------------------------
2) async(비동기 스크립트)
	페이지와 완전히 독립적으로 동작한다.
	- 다운로드는 백그라운드에서 다운되며, HTML 페이지는 
	  async 스크립트 다운이 완료되기를 기다리지 않고 페이지 내에 있는 컨텐츠를 처리하고 출력한다.
	  (async 스크립트 실행중에는 HTML 파싱이 멈춘다.)
	- DOMContentLoaded이벤트와 async 스크립트는 서로를 기다리지 않고 실행한다.
	  페이지 구성이 끝난 후에 async 스크립트 다운로딩이 끝난 경우 DOMContentLoaded는 async 스크립트 실행 전에 발생할 수 있다.

async 스크립트의 실행 순서는 가변적으로 변한다.

HTML파싱이 진행되면서 <p>와 <script>를 만난다.
- async 스크립트들(long.js와 small.js)은 비동기로 다운로드된다.
- 누가 먼저 다운로드를 마치느냐에 따라서 실행 순서가 달라진다.
- HTML 파싱은 이때 잠깐 멈췄다가 다시 진행된다.(script 실행 시점만)
- DOMContentLoaded는 DOM 파싱이 끝나면 바로 실행되는데 아직 async 스크립트가 실행중이어도 상관없다.
-----------------------------------------------------------------------------
3) 왜 defer와 async가 필요할까?
	브라우저가 <script>태그를 만나게되면 스크립트를 먼저 다운받고, 실행도 먼저하게 된다.
	이때 HTML파싱이 중단되게 되면서 사용자는 불편함을 느끼게된다.*(사용자 경험 저하, 성능 저하)
	HTML 렌더링을 막지않도록 도와주는 속성이 defer와 async이고, 반드시 사용해야한다.
-----------------------------------------------------------------------------	
4) defer와 async의 특징

	- defer
	html파싱과 동시에 백그라운드에서 다운로드
	html파싱 완료 후, DOMContentLoaded 직전에 실행된다.
	문서에 선언된 순서대로 실행순서가 보장된다는 특징을 가짐.
	html파싱은 절대 멈추지 않는다.
	그렇기 때문에 DOM요소에 이벤트 핸들러를 추가하거나,
	사용 : 여러개의 스크립트를 순서대로 실행해야할때 주로 사용한다.
	
	- async
	html파싱과 동시에 백그라운드에서 다운로드
	다운로드 완료 즉시 실행(html파싱은 이때 멈춘다.)
	먼저 다운된 것이 먼저 실행되기 때문에 순서는 보장할 수 없다.
	html파싱은 실행하는 순간만 멈추게된다.*(부분차단)
	사용 : 스크립트가 페이지 구성과 무관할 때 사용한다.(ex_ 광고, 통계)
	
+) 기본 스크립트 흐름
	HTML파싱이 진행중일때 스크립트 태그를 만나면 
	멈췄다가 스크립트를 다운로드받고 
	스크립트를 실행한다. 그리고 나서 HTML파싱을 다시 진행한다.

	defer : HTML파싱이 진행 중 -> 스크립트 다운 -> 스크립트 모두 DOM생성 후 실행
	async : HTML파싱이 진행 중 -> 스크립트 다운 -> 먼저 다운로드 된 즉시 실행(HTML파싱 멈춤) -> HTML파싱 다시 진행(실행되는 동안 파싱 멈췄던거)
---------------------------------------------------------------------------------------------------------------------------














	