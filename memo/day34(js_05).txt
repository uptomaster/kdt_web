
day34(js 5일차)

javascript 쓰레드 -> 동기와 비동기

1. javascript 쓰레드

1) 동기화 (synchronized)
	동기와 비동기의 흐름을 알기 위해서 알기 위해서 쓰레드 개념을 먼저 알아야한다.
	프로그램, 프로세스 이해 필수

	- 프로그램(program)	
		실행되지 않은 상태의 소스코드의 모음

	- 프로세스(process)
		메모리에 올라가서 동작하는 실행중인 프로그램

2) 쓰레드 (Thread)
	작업을 처리하는 흐름을 의미
	비동기식 방식으로 특정 연산을 수행할때 업무를 효율적으로 처리하기 위해서
	짧은 시간에 다양한 연산들을 마치 동시에 처리하는 것처럼 할 수 있게 하는 것.	

	- (1)단일 쓰레드(Single Thread)
		처리경로를 한개만 가지고 있기 때문에 직렬적이다.
		동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적이다.	
		하지만 하나의 작업에 문제가 발생하더라도 다른 작업에는 영향을 끼치지 않는다.
		따라서 안정성이 보장되고 설계시 멀티 쓰레드에 비해 쉽다.
	
	- (2)멀티 쓰레드
		하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례대로 처리한다.
		여러개의 처리경로를 가질 수 있도록 하며, 동시작업도 가능해진다.
		설계하기 굉장히 어렵고, 하나의 쓰레드가 문제 발생 시 모든 쓰레드에 문제가 발생한다.
		처리량 증가, 효율성 증가, 처리비용 감소의 장점이 크기 때문에 단점을 감수하고 설계한다.
		

	- (3)자바 스크립트의 쓰레드
		자바 스크립트는 단일 쓰레드로 한번에 하나의 작업만 수행할 수 있다.
		자바 스크립트에서는 이벤트 루프를 활용해서 테스크가 종료되지 않아도 곧바로 실행하는 함수를 처리하는 방식을 도입했다.
		동기의 코드는 순차적인 흐름이지만 비동기는 처리시간이 각각 다르기 때문에 결과를 예상할수가 없다.
		따라서 결과에 비동기 이후에 실행된 동기적 함수를 실행시키기 위해서 비동기를 동기적으로 처리한다.

2. 동기와 비동기

	- (1) 동기
		요청을 보낸 후 다음 응답을 받아야지만 다음 동작이 이루어지는 방식을 의미한다.
		모든 일은 순차적으로 실행되고, 어떤 작업이 실행중이라면 다른 작업은 대기하게 된다.

	- (2) 비동기
		데이터를 수신하는 코드와 페이지를 표시하는 결과가 비동기적으로 처리하는 방식을 의미한다.
		들어오는 일은 모두 우선적으로 받아주고, 끝났다는 이벤트가 전달되면 해당 이벤트를 처리한다.
		자바스크립트에서는 기존에 콜백함수를 이용했지만 콜백 지옥에 빠질 가능성이 높기 때문에 
		ES7 이상에서는 Promise를 사용하고, ES8 이상에서는 async와 await을 지원한다. 

3. 프로미스(Promise)
	자바스크립트 비동기 처리에 사용되는 객체이다.
	주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다.
	
	- 프로미스의 상태 3가지
		대기(pending) : 비동기 작업이 아직 완료되지 않은 상태
		이행(fulfilled) : 비동기 작업이 성공적으로 완료된 상태
		거부(rejected) : 비동기 작업이 실패한 상태

	
4. async / await
	async 함수는 함수 선언 앞에 async 키워드를 붙여서 정의한다.
	항상 Promise를 반환한다.
	async 함수 내에서 await 키워드를 사용하여 다른 프로미스나 기본값을 기다릴 수 있다.

	await 키워드는 *async 함수 내에서만 사용할 수 있다.*
	프로미스가 처리될 때까지 해당 함수의 실행이 일시중지된다.
	프로미스가 이행되면 해당 값을 반환한다.
	await 표현식은 프로미스를 반환하는 모든 비동기 작업에 사용될 수 있다.

// async 함수는 내부에서 return한 값을 자동으로 Promise.resolve(value)로 변환한다.
async function getName(){
  return "짱구"; // 자동으로 Promise객체로 감싸진다.
}

async function printName(){
  const name = await getName(); // await getName()은 getName()함수의 Promise가 이행(resolve)될때까지 기다림.
  console.log(name);
}

printName();
------------------------------------------------------------------------------
	+) Promise.then()과 async / await 

		Promise.then()		async / await
	코드	콜백 체이닝방식(중첩가능성)	동기코드처럼 직관적
	에러처리	.catch()메소드 사용	try / catch블록 사용
	디버깅	콜백이 많을수록 어려움	흐름이 직관적이기 때문에 쉬움.
	사용조건	어디서든 사용 가능		async 함수내에서만 await사용가능.


5. fetch
	자바스크립트에서 제공하는 비동기 네트워크 통신을 위한 기능이다.
	HTTP 요청을 보내고 응답을 받아 사용한다.
	웹 어플리케이션에서 서버와 데이터를 주고받을때 많이 사용된다.
	
	fetch는 URL을 매개변수로 사용하여 요청을 보내고 프로미스를 반환한다.
	네트워크 요청 : HTTP 요청 메소드(get, post, put, delete 등) 요청 헤더, 본문 등을 설정할 수 있다.
	프로미스 기반 : .then(), .catch()를 사용하여 응답을 처리할 수 있다.
	
+) json 무료 가상 REST API 서버 : JSONPlaceholder 
	테스트 및 프로토타이핑을 위한 무료 가상 API를 제공하는 사이트
	6가지의 데이터 api 주소를 호출하여 데이터를 JSON으로 받아 볼 수 있다.
	
   	https://jsonplaceholder.typicode.com/

	<Resources>
	/posts : 100개의 posts 저장
	/comments : 500개의 comments 저장
	/album	: 100개의 album 저장
	/photos	: 5000개의 photo 저장
	/todos	: 200개의 todos 저장
	/users	: 10명의 user 저장


+) AJAX(Asynchronous Javascript and XML)
	페이지를 새로고침 하지 않고도 서버와 데이터를 주고받는 기술
	웹 페이지 전체를 다시 로딩하지 않아도, 일부 데이터만 바꿀 수 있음.(시계, 날씨 등)
	초창기엔 XML을 썼지만, 요즘은 JSON과 함께 더 많이 사용된다.
	AJAX는 기술이 아니라 방법론이다. (과거 : XMLHttpRequest 객체를 이용해서 구현)


	<예전 방식, 지금은 이렇게 사용하지 않는다.>
	const xhr = new XMLHttpRequest();
	xhr.open("get","url주소");
	xhr.onreadystatechange = function() {
		if(xhr.readyState === 4 & xhr,status === 200){
			const data = JSON.parse(xhr.responseText);
			console.log(data);
		}
	};
	xhr.send();


+) 그래서 나온것이 fetch이다.
XMLHttpRequest를 대체하기 위해서 만들어진 더 간단하고 강력한 함수(브라우저 내장함수, Promise 기반 동작)

	fetch("url주소").then((response)=> response.json()).then((data) => console.log(data)).catch((error)=>console.error(error));


6. JQuery
	자바스크립트의 라이브러리이다.
	초창기의 Jquery는 크로스 브라우징을 지원해서 많은 인기를 얻었다.
	지금은 표준화된 자바스크립트를 사용하기 때문에 Jquery 의 필요성이 많이 떨어졌다.
	자바스크립트 DOM, AJAX등을 사용 시 길고 복잡한 코드의 양을 줄여주어 편의성을 높이기 위해서 주로 사용된다.

	1) Jquery사용
	네트워크 상으로 연결만 하면 간편하게 사용할 수 있다.
	


개요 					왜 이 주제를 선정했는지, 기대효과
개발도구					프론트/백 + 협업툴
파트분배		 			
기능흐름도&ERD 				데이터베이스 시각화 및 정규화 과정
주요기능					API 사용메소드 상세인터페이스 트러블슈팅 향후계획
시연 					
QNA










	