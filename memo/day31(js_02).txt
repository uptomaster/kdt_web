day31(js 2일차)
 함수 -> 객체-> 배열 -> map() -> filter() -> 자바스크립트 엔진 구조 -> DOM


1. 함수(Function)
	코드 블록으로 감싸져 있는 문으로 이루어진 하나의 실행 단위
	자바스크립트에서 함수는 일급 객체이다(일급객체 : 값으로 사용할 수 있는 것을 의미)
	즉, 함수는 객체 타입의 값(Object)이고, 변수에 저장하거나 매개변수로 전달하거나 반환하는 것이 가능하다.
	
- 함수 명명
	showMessage(...) // 메시지를 보여주는 함수
	getAge(...) // 나이를 반환하는 함수
	setName(...) // 이름을 넣어주는 함수
	
- 함수의 규칙
	함수는 동작하나만 담당해야한다.(모듈화)
	함수는 함수이름에 언급된 동작을 정확하게 수행해야한다.
	그 이외의 동작은 수행해서는 안된다.
	독립적인 두개의 동작은 독립된 함수 두개에서 나눠서 수행할 수 있도록 한다.
	
<함수의 종류>
1) 일반함수
	function 식별자(매개변수1, 매개변수2..){
		코드작성
		return 반환값;
	}
자바와 다른 점은 자료형이 따로 작성하지 않는다는 것이다.

- 용어
	function : 함수 선언을 표시하는 키워드
	식별자	 : 함수의 기능을 의미할 수 있는 동사로 작성
	매개변수	 : 매개변수(인자), 여러 개 있을 경우 콤마로 분리하고 자료형은 작성X
	return	 : 함수의 실행 종료 후에 리턴값이 있다면 해당값 반환

- 함수 호출 방식
	매개변수	리턴값	호출방법
	x	x	식별자();
	o	x	식별자(인수);
	x	o	출력(식별자());
	o	o	출력(식별자(인수));

- 매개변수와 인수
	매개변수(인자, parameter) : 매개변수는 함수 선언부에서 작성
	인수(argument) : 매개변수에 들어가는 값. 함수 호출부에서 사용
	디폴트 매개변수 : 미리 기본값을 설정해서 넣어줄 수 있다.
		      매개변수가 여러개 있을 경우, 맨 뒤에서부터 설정해야한다.
	ex) function numPrint(num1, num2, num3=10){
			출력(num1,num2,num3);
		}

	-> numPrint(10,20,30); // 10 20 30 출력.
	-> numPrint(10,20); // 10 20 10 출력.

	가변 매개변수 : 인수가 몇개 들어갈지 모를 때 사용한다. 
		     배열로 만들어진다(for문과 빠른 for문 사용가능)
	ex) function numPrint(...number){
		출력(number);
		for(int i = 0; i < number; i++){
			출력(i);
	}	

//1) 일반함수 참고
//매개변수 x 리턴값 x
function showHello(){
  console.log(`hello`);
}

showHello();

//매개변수 o 리턴값 x
function showGreet(greeting){
  console.log(`인사말 : ${greeting}`);
}

showGreet("안녕하세요");
showGreet("안녕히계세요");

//매개변수 x 리턴값 o
function multiply(){
  return 10 * 20;
}

console.log(multiply());
let result = multiply();
console.log(result);

//매개변수 o 리턴값 o
function multi(num1, num2){
  return num1 * num2;
}

console.log(multi(5, 2));
let result2 = multi(10, 5);
console.log(result2);



- ★동적 바인딩
	컴파일 시의 값에 따라 자료형이 동적으로 결정되는 것을 의미한다.
		

2) 익명함수
	이름이 없는 함수이며, 보통 변수에 저장해서 사용한다.
	let 변수명 = function(매개변수){
			실행할 코드;
			return 반환값;
			};



3) 콜백함수★★★
	함수의 매개변수로 전달되는 함수를 의미한다.
	(다른 함수의 매개변수로 전달되어 실행되는 함수를 의미한다.)
	모듈화를 시키기 위해 원하는 곳에서 실행할 때 사용한다(재사용성up)
	 비동기작업, 재사용성, 모듈화를 위함.

setTimeout(function(){
  console.log("2초뒤 출력")
	},2000);

	- 콜백 지옥 : 콜백함수의 단점
		콜백을 과도하게 중첩하면 코드가 복잡해지고
		가독성이 떨어지는 콜백 지옥이 발생할 수 있다.
	
	- 콜백함수의 대안 : Promise와 saync/await
		코드의 가독성을 높이고 
		비동기 작업을 체계적으로 처리할 수 있게 한다.

4) 즉시실행함수★★★
	한번만 사용하는 함수이다.
	한번만 사용하는 함수는 즉시 실행함수로 만들어 사용한다.
	즉시실행함수는 만듦과 동시에 실행이 된다.
	재사용할 목적이 없기 때문에 보통 익명함수로 만들어서 사용한다.
	
	(function(매개변수){
		  실행할코드;
		})(매개변수로 넘겨줄 값);


	let result = (function(num1, num2){
  			  return num1+num2;
			})(10,20);

	console.log(result);


5) 화살표함수★★★★★
	익명함수를 더 편하게 만들 수 있는 표기법(자바 람다식과 유사)
	
	() => {}

// 매개변수가 1개인경우 소괄호 () 생략가능.
const square = x => x * x;

// 매개변수가 없는 경우, 비어있는 소괄호 () 사용
const greet = () => "hello! 2025!";

// 여러줄의 코드가 필요한 경우 중괄호{} 사용.
const sumArray = (arr) => {
  let sum = 0;
  for(let num of arr){ // 빠른 for문
    sum += num;
  }
  return sum;
}


6) 재귀함수
	자기 자신을 호출하는 함수.
	재귀함수를 잘못 사용하면 콜백지옥에 빠지게 된다.	

======================================================================================
2. 전역 객체

1) GlobalThis
	웹 브라우저 환경에서는 window객체로 사용되고,
	Node.js 환경에서는 global객체로 사용된다.

======================================================================================
3. 객체

1) javascript의 객체
	자바스크립트는 원시 타입값을 제외한 모든 값이 객체이다.
	객체는 프로퍼티(property)와 메소드로 구성된다.
	프로퍼티는 키와 값으로 구성되며 값의 위치에 따라 함수가 올 수도 있다.
	프로퍼티의 값이 함수인 경우 일반 함수와 구분하기 위해서 '메소드'라고 부른다.

2) 객체 생성
	클래스가 없어도 다양한 방법으로 객체를 만들 수 있다.
	객체 리터럴을 이용한 생성이고 객체 리터럴은 {}을 이용하여 표현한다.

	let test = {
		num1 : 10,
		num2 : 20,
		name : "신짱구",
		sum : function(){ // 메소드
			return this.num1 + this.num2;
			}
		};

3) 객체 사용
	객체의 프로퍼티에 접근하는 방법은 두가지이다.

	(1) 점(.)을 이용한다. => console.log(test.name); //test라는 객체의 name이라는 프로퍼티접근
	(2) 대괄호[]를 이용한다. (key를 반드시 ''로 감싸야한다.)
		=> console.log(test['name']);

4) 프로퍼티의 생성과 삭제
	객체를 생성하고 이후에 객체 내부에 프로퍼티를 생성하거나 삭제하는 것이 가능하다.
	- 생성
	객체에 존재하지 않는 키에 값을 저장한다.
	test.num3 = 3.5;

	- 삭제
	delete를 사용한다.
	delete test.num3; // 해당 키와 프로퍼티를 같이 삭제한다.

============================================================================================
4. 생성자 함수와 클래스

1) 생성자 함수
	함수 선언을 통해 생성자를 정의한다.
	생성자 함수 내부에서 this 키워드를 사용하여 객체의 프로퍼티를 초기화한다.
	new 키워드를 이용하여 생성자 함수를 호출하여 객체를 생성한다.

2) 클래스
	class 키워드를 사용하여 클래스를 정의한다.
	클래스 내부에 constructor 메소드를 정의하여 객체의 프로퍼티를 초기화한다.
	new 키워드를 이용하여 클래스를 호출하여 객체를 생성한다.
============================================================================================
5. 배열

	자바스크립트 배열은 일반 배열처럼 보이고 배열처럼 사용하지만, 리스트에 가깝다.
	배열이 저장하는 값을 요소(element)라고 부르고, 요소로 저장하는 값은 원시타입뿐만 아니라 객체 타입도 가능하다.

1) 배열 생성방법
	- 배열 리터럴 대괄호[]를 사용하는 방법
		(1)초기값 할당
			let ar1 = [1, 3, 'a', true]; => 파이썬의 리스트와 유사함.
		
		(2)배열 크기 지정(쉼표 개수만큼 크기가 지정)
			let ar2 = [, , ,];

	- 생성자 함수를 이용하는 방법
		(1)초기값 할당
			let ar3 = new Array(1,2,3);

		(2)배열 크기 지정
			let ar4 = new Array(3); // 요소가 한개이고 숫자인 경우 배열 크기로 사용된다.

	+) 자바에서 빈 배열 생성
		자료형[] 배열명 = {};
		자료형[] 배열명 = new 자료형[칸수];

2) 배열 사용
	배열명[idx];

3) 다차원 배열
	배열안의 배열을 의미
	다차원 배열은 행렬을 저장하는 용도로 사용된다.
	const matrix = [[1,2,3], [4,5,6]]; // 2행 3열의 2차원배열

4) 배열에서 사용하는 반복문
	- for ... in
		객체의 열거가능한 속성을 순회할 때 주로 사용
		배열이나 객체의 key 값을 순회
		배열에서는 인덱스가 키로 사용되므로 배열의 인덱스를 순회하게 된다.
	
	- for ... of
		이터러블 객체(반복가능한 객체, 배열/문자열/Map/Set 등)를 순회할 때 주로 사용한다.
		value(배열의 값)을 순회
		배열의 각 요소(값)을 순서대로 순회한다.

	
============================================================================================
6. map() 함수
	
	배열의 각 요소에 대해 주어진 콜백함수를 호출하고, 각 요소를 새로운 배열로 매핑시킨다.
	const newArray = array.map(callback(element[,index [, array]][, thisArgs]));

	element : 현재 처리중인 요소의 값
	index : 현재 처리중인 요소의 인덱스(선택)
	array : map()을 호출한 배열(선택)
	thisArgs : callback 함수 내에서 this 키워드가 참조할 객체(선택)
============================================================================================
7. filter() 함수
	주어진 콜백함수로 모든 배열요소를 테스트하고 조건을 충족하는 요소만을 가지고 새로운 배열을 생성한다.
	const newArray = array.filter(callback(element, index, array, thisArgs));

	element : 현재 처리중인 요소의 값
	index : 현재 처리중인 요소의 인덱스(선택)
	array : filter()를 호출한 배열(선택)
	thisArgs : callback함수 내에서 this 키워드가 참조할 객체(선택)
============================================================================================
8. 자바스크립트 엔진 구조와 동작원리

1) 자바스크립트 엔진 구조
	싱글 쓰레드(single-thread) 언어이다.
	한 번에 하나의 작업만 수행할 수 있다.
	동시에 여러 작업을 직접 처리하지 못한다.
	비동기 처리를 통해서 동시성(concurrency)을 지원한다.
	
	+) 싱글 쓰레드
	한번에 하나의 작업만 처리할 수 있는 구조를 의미함.
	자바스크립트 엔진은 단일 쓰레드에서 코드를 실행하며 동시에 여러 작업을 실행할 수 없다.
	즉, 코드가 순차적으로 실행되는것을 의미한다. 기본적으로 OS는 멀티 쓰레드로 되어있다.

	+) 동시성 모델
	콜스택(Call stack)	현재 실행중인 작업
	태스크 큐(Task Queue)	비동기작업의 콜백함수 대기열
	이벤트 루프(Event Loop)	콜스택과 테스트 큐를 관리하며 작업을 순차적으로 수행

	+) 이벤트 루프의 작동방식
	(1)콜스택에 작업이 있는지 확인한다.
	(2)스택이 비어있지 않으면 : 현재 작업 수행. / 스택이 비어있으면 : 테스크큐에서 대기중인 작업을 가져와서 실행.
	(3)비동기 작업 : 태스크 큐에 콜백함수 형태로 저장.

2) 자바스크립트 엔진의 구성 요소
	- 콜스택(Call Stack)
	함수 호출 순서를 관리하는 LIFO(Last-In-First-Out) 구조의 스택
	실행중인 함수가 위로 쌓이고(push)
	실행이 완료되면 제거된다.(pop)

	function a(){
		b();
	}
	function b(){
		console.log('실행');
	}
	a(); => main() -> a() -> b() -> console.log()


	- 힙(Heap)
	객체, 배열, 함수 등 참조형 데이터가 저장되는 '동적' 메모리 영역.
	크기가 정해져있지 않고 필요에 따라서 공간을 할당하거나 해제한다.
	변수는 힙의 주소(참조값)를 Stack에 보관한다.
	실제 데이터는 힙에 저장된다.

	let user = {name : "이남혁"};
	========   ================
	스택	   힙


	 - 이벤트 루프(Event Loop)
	콜스택이 비어있는지 감시하는 관리자 역할
	만약 콜 스택이 비어있다면 Task Queue에서 대기중인 콜백함수를 꺼내서 실행한다.
	이벤트 루프의 매커니즘 덕분에 비동기 코드도 순차적으로 실행된다.

	- 태스크 큐(Task Queue)
	타이머, 이벤트, HTTP 요청 등 비동기 콜백함수가 대기하는 줄을 의미한다.
	FIFO(First-In-First-Out) 방식으로 가장 먼저 들어온 콜백부터 실행된다.(선입선출)

	console.log('시작');
	setTimeout( () => {
		console.log('1초뒤 실행');	
	}, 1000);
	console.log('끝');	
	=> 이거 순서 확인하기

	- 이벤트 루프 구조
	   Call Stack      현재 실행중인 동기 코드
	       ▲
	       ▼
	   Task Queue      비동기 콜백함수들 대기(setTimeout, 이벤트 등)
	       ▲
	       ▼
	   Event Loop      콜 스택 비면 큐에서 꺼내 실행  
	
3) 자바스크립트 메모리구조(RAM 기준)
05 Kernel Space	=> 운영체제 영역을 의미함.
==========================================================================
stack		=> 스택에서는 실행 컨텍스트 저장.(함수호출, 원시데이터, 힙의 참조주소)저장
--------------------------------------------------------------------------
Heap		=> 힙에서는 객체, 배열, 함수가 저장.(동적메모리)저장
--------------------------------------------------------------------------
BSS		=> 초기화되지 않은 정적 데이터가 저장.
--------------------------------------------------------------------------
Data영역		=> 전역변수, 초기화된 정적 데이터가 저장.
--------------------------------------------------------------------------
Text영역		=> 코드(명령어) 자체가 저장됨.
==========================================================================

